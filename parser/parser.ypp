%{
	#include<bits/stdc++.h>
	#include "ast.h"
	extern FILE *yyin;
	extern char* yytext;
	extern "C" int yylex();
	extern int yyparse();
	void yyerror(const char *s);
	class Program* start=NULL;
	extern int errors;
	int errors=0;

%}


%union{
	int num;
	char *str;
	class Program *prog;
	class Field_decls *fldds;
	class Fields_decl *fldd;
	class Comma_sep_fields *c_s_fs;
	class Comma_sep_field *c_s_f;
	class Method_decls *m_ds;
	class Method_decl *m_d;
	class Type_plus_ids *t_p_ids;
	class Type_plus_id *t_p_id;
	class Block *blk;
	class Var_decls *v_ds;
	class Var_decl *v_d;
	class IDSS *id_ss;
	class IDS *id_s;
	class Statements *stmts;
	class Statement *stmt;
	class Assignment *asgnmt;
	class Method_call *mthd_call;
	class If_Else *if_else;
	class Iff *iff;
	class Fors *fors;
	class Return *retn;
	class Break *brk;
	class Continue *cntue;
	class Assign_op *asgn_op;
	class Func_call *func_call;
	class Call_out *call_out;
	class Callout_args_plus *C_a_p;
	class Callout_arg *C_a;
	class Location *loc;
	class Expr_plus *expr_p;
	class Expr *expr;
	class Literal *lit;
	class Int_literal *int_lit;
	class Bool_literal *bool_lit;
	class Char_literal *char_lit;
	class Unary_expr *un_expr;
	class Binary_expr *bin_expr;
	class Bracket_expr *brckt_expr;

}



%token <str> ID
%token <str> TYPE
%token CLASS
%token PROGRAM
%token CHAR_TYPE
%token <str> BOOL_LIT
%token <num> INT_LIT
%token INT
%token <str> BOOL
%token NUM
%token HEX
%token <str> STRING
%token <str> CHAR
%token <str> VOID
%token IF
%token ELSE
%token FOR
%token RETURN
%token BREAK
%token CONTINUE
%token CALLOUT
%token TRUE
%token FALSE
%token <str> LE
%token <str> GE
%token <str> AE
%token <str> SE
%token <str> EQ
%token <str> NEQ
%token <str> '!'
%token <str> '='
%token <str> '>'
%token <str> '<'
%token <str> '+'
%token <str> '-'
%token <str> '*'
%token <str> '/'
%token <str> '%'
%token <str> AND
%token <str> OR
%token ','
%token '{'
%token '}'
%token '['
%token ']'
%token '('
%token ')'
%token ';'


%left '+' '-'
%left '*' '/' '%'
%left '<' '>' 
%left LE GE
%left EQ NEQ
%right '!' '=' AE SE
%left AND OR

%type <prog> program
%type <fldds> field_decls
%type <fldd> fields_decl
%type <c_s_fs> comma_sep_fields
%type <c_s_f> comma_sep_field
%type <m_ds> method_decls
%type <m_d> method_decl
%type <t_p_ids> type_plus_ids
%type <t_p_id> type_plus_id
%type <blk> block
%type <v_ds> var_decls
%type <v_d> var_decl
%type <id_ss> idss
%type <stmts> statements
%type <stmt> statement
%type <mthd_call> method_call
%type <asgn_op> assign_op
%type <C_a_p> callout_arg_plus
%type <C_a> callout_arg
%type <loc> location
%type <expr_p> expr_plus
%type <expr> expr
%type <lit> literal

%%

program : CLASS PROGRAM '{' field_decls method_decls '}' {
	$$=new Program($4,$5);
	start=$$;
}

		| CLASS PROGRAM '{' '}' {
		$$=new Program(NULL,NULL);
		start=$$;
		}
		| CLASS PROGRAM '{' field_decls '}'
		{
			$$=new Program($4,NULL);
			start=$$;
		}

		| CLASS PROGRAM '{' method_decls '}'
		{
			$$=new Program(NULL,$4);
			start=$$;
		}

field_decls: fields_decl
				{
					$$= new Field_decls();
					$$->Push_back($1);
				}
			| field_decls fields_decl
				{
					$$->Push_back($2);
				}
			

fields_decl: TYPE comma_sep_fields ';'
				{
					$$ = new Fields_decl(string($1),$2);
				}

comma_sep_fields: comma_sep_field
				{
					$$ = new Comma_sep_fields();
					$$->Push_back($1);
				}
			| comma_sep_fields ',' comma_sep_field
			{
				$$->Push_back($3);
			} 

comma_sep_field: ID
			{
				$$ = new Comma_sep_field(string($1));
			}
			| ID '[' INT_LIT ']'
			{
				$$ = new Comma_sep_field(string($1),$3);
			}
			
method_decls: method_decl
			{
				$$ = new Method_decls();
				$$->Push_back($1);
			}
			| method_decls method_decl
				{
					$$->Push_back($2);
				} 

method_decl: TYPE ID '(' type_plus_ids ')' block
			{
				$$ = new Method_decl(string($1),string($2),$4,$6);
			}
			| TYPE ID '(' ')' block
			{
				$$ = new Method_decl(string($1),string($2),NULL,$5);
			}
			| VOID ID '(' type_plus_ids ')' block
			{
				$$ = new Method_decl(string($1),string($2),$4,$6);
			}
			| VOID ID '(' ')' block
			{
				$$ = new Method_decl(string($1),string($2),NULL,$5);
			}

type_plus_ids: type_plus_id
			{
				$$ = new Type_plus_ids();
				$$->Push_back($1);
			}
			| type_plus_ids ',' type_plus_id
			{
				$$->Push_back($3);
			}

type_plus_id: TYPE ID
			{
				$$ = new Type_plus_id(string($1),string($2));
			}
			

block: '{' var_decls statements '}'
			{
				$$ = new Block($2,$3);
			}
		| '{' var_decls '}'
			{
				$$ = new Block($2,NULL);
			}
		| '{' statements '}'
			{
				$$ = new Block(NULL,$2);
			}
		| '{' '}'
			{
				$$ = new Block(NULL,NULL);
			}

var_decls: var_decl
			{
				$$ = new Var_decls();
				$$->Push_back($1);
			}
		| var_decls var_decl
			{
				$$->Push_back($2);
			}

var_decl: TYPE idss ';'
			{
				$$ = new Var_decl(string($1),$2);
			}
		

idss: ID
		{
			$$ = new IDSS();
			$$->Push_back($1);
		}
	| idss ',' ID
		{
			$$->Push_back($3);
		}



statements: statement
			{
				$$ = new Statements();
				$$->Push_back($1);
			}
		| statements statement
			{
				$$->Push_back($2);
			}

statement: location assign_op expr ';'
			{
				$$ = new Assignment($1,$2,$3);
			}
		| method_call ';'
			{
				$$=$1;
			}
		| IF '(' expr ')' block ELSE block
			{
				$$ = new If_Else($3,$5,$7);
			}
		| IF '(' expr ')' block
			{
				$$ = new If_Else($3,$5,NULL);
			}
		| FOR ID '=' expr ',' expr block
			{
				$$ = new Fors(string($2),$4,$6,$7);
			}
		| RETURN expr ';'
			{
				$$ = new Return($2);
			}
		| RETURN ';'
			{
				$$ = new Return(NULL);
			}
		| BREAK ';'
			{
				$$ = new Break();
			}
		| CONTINUE ';'
			{
				$$ = new Continue();
			}
		| block
			{
				$$ = $1;
			}


location: ID
			{
				$$ = new Location(string($1));
			}
		| ID '[' expr ']'
			{
				$$ = new Location(string($1),$3);
			}

assign_op: '='
			{
				$$ = new Assign_op($1);
			}
		| AE
			{
				$$ = new Assign_op($1);
			}
		| SE
			{
				$$ = new Assign_op($1);
			}

expr: location
		{
			$$=$1;
		}
	| method_call
		{
			$$=$1;
		}
	| literal
		{
			$$=$1;
		}
	| expr '+' expr
		{
			$$ = new Binary_expr($1,string($2),$3);
		}
	| expr '-' expr
		{
			$$ = new Binary_expr($1,string($2),$3);
		}
	| expr '*' expr
		{
			$$ = new Binary_expr($1,string($2),$3);
		}
	| expr '/' expr
		{
			$$ = new Binary_expr($1,string($2),$3);
		}
	| expr '%' expr
		{
			$$ = new Binary_expr($1,string($2),$3);
		}
	| expr '<' expr
		{
			$$ = new Binary_expr($1,string($2),$3);
		}
	| expr '>' expr
		{
			$$ = new Binary_expr($1,string($2),$3);
		}
	| expr LE expr
		{
			$$ = new Binary_expr($1,string($2),$3);
		}
	| expr GE expr
		{
			$$ = new Binary_expr($1,string($2),$3);
		}
	| expr EQ expr
		{
			$$ = new Binary_expr($1,string($2),$3);
		}
	| expr NEQ expr
		{
			$$ = new Binary_expr($1,string($2),$3);
		}
	| expr AND expr
		{
			$$ = new Binary_expr($1,string($2),$3);
		}
	| expr OR expr
		{
			$$ = new Binary_expr($1,string($2),$3);
		}
	| '-' expr
		{
			$$ = new Unary_expr(string($1),$2);
		}
	| '!' expr
		{
			$$ = new Unary_expr(string($1),$2);
		}
	| '(' expr ')'
		{
			$$ = new Bracket_expr($2);
		}



method_call: ID '(' expr_plus ')'
				{
					$$ = new Func_call(string($1),$3);
				}
			| ID '(' ')'
				{
					$$ = new Func_call(string($1),NULL);
				}
			| CALLOUT '(' STRING callout_arg_plus ')'
				{
					$$ = new Call_out(string($3),$4);
				}
			| CALLOUT '(' STRING ')'
				{
					$$ = new Call_out(string($3),NULL);
				}


 
callout_arg_plus: ',' callout_arg
					{
						$$ = new Callout_args_plus();
						$$->Push_back($2);
					}
				| callout_arg_plus ',' callout_arg 
					{
						$$->Push_back($3);
					}
				

callout_arg: expr
				{
					$$ = new Callout_arg($1);
				}
			| STRING
				{
					$$ = new Callout_arg(string($1));
				}

expr_plus: expr
			{
				$$ = new Expr_plus();
				$$->Push_back($1);
			}
		| expr_plus ',' expr
			{
				$$->Push_back($3);
			}



literal: INT_LIT
			{
				printf("%d\n",$1);
				$$ = new Int_literal($1);
			}
		| CHAR
			{
				$$ = new Char_literal(string($1));
			}
		| FALSE
			{
				
				$$ = new Bool_literal("false");
			}
		| TRUE
			{
				
				$$ = new Bool_literal("true");
			}







%%

main(int argc, char **argv)
{
	if(argc<=1 || argc>2)
	{
		if(argc>2)
			fprintf(stderr, "More than required number of arguments");
		fprintf(stderr, "Input should be of the form `./parser filename`\n");
	}
	yyin = fopen(argv[1], "r");
	yyparse();
	printf("Parsing Over\n");
	if(start)
	{
		start->GenCode();
		if(errors==0)
		{
			start->GenCodeDump();
		}
		else
		{
			cerr<<"Error"<<endl;
		}
	}
}

void yyerror(const char *s)
{
	fprintf(stderr, "error: %s\n", s);
}