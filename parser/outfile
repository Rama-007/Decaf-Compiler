; ModuleID = 'My Decaf Compiler'

@a = global [100 x i32] zeroinitializer
@b = global [100 x i32] zeroinitializer
@sum = global [100 x i32] zeroinitializer
@n = global i32 0
@i = global i32 0
@0 = private unnamed_addr constant [31 x i8] c"Enter the size of vectors: %d\0A\00"
@1 = private unnamed_addr constant [36 x i8] c"The elements of first vector are: \0A\00"
@2 = private unnamed_addr constant [4 x i8] c"%d \00"
@3 = private unnamed_addr constant [3 x i8] c"\0A \00"
@4 = private unnamed_addr constant [37 x i8] c"The elements of second vector are: \0A\00"
@5 = private unnamed_addr constant [4 x i8] c"%d \00"
@6 = private unnamed_addr constant [3 x i8] c"\0A \00"
@7 = private unnamed_addr constant [31 x i8] c"The sum of given vectors is: \0A\00"
@8 = private unnamed_addr constant [5 x i8] c"%d, \00"
@9 = private unnamed_addr constant [2 x i8] c"\0A\00"

define void @main() {
entry:
  %i24 = alloca i32
  %i14 = alloca i32
  %i4 = alloca i32
  %i = alloca i32
  %0 = load i32, i32* @n
  store i32 5, i32* @n
  %1 = load i32, i32* @n
  %2 = call i32 @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @0, i32 0, i32 0), i32 %1)
  %3 = call i32 bitcast (i32 (i8*, i32)* @printf to i32 (i8*)*)(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @1, i32 0, i32 0))
  store i32 1, i32* %i
  br label %loop_body

loop_body:                                        ; preds = %loop_body, %entry
  %i1 = phi i32 [ 1, %entry ], [ %Next_Val, %loop_body ]
  %4 = load i32, i32* @n
  %5 = load i32, i32* %i
  %multmp = mul i32 %5, 5
  %addtmp = add i32 %multmp, 2
  %6 = load i32, i32* %i
  %a_Index = getelementptr [100 x i32], [100 x i32]* @a, i32 0, i32 %6
  %7 = load i32, i32* %a_Index
  store i32 %addtmp, i32* %a_Index
  %8 = load i32, i32* %i
  %a_Index2 = getelementptr [100 x i32], [100 x i32]* @a, i32 0, i32 %8
  %9 = load i32, i32* %a_Index2
  %10 = call i32 @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @2, i32 0, i32 0), i32 %9)
  %11 = call i32 bitcast (i32 (i8*, i32)* @printf to i32 (i8*)*)(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @3, i32 0, i32 0))
  %i3 = load i32, i32* %i
  %Next_Val = add i32 %i3, 1
  store i32 %Next_Val, i32* %i
  %loop_condition = icmp slt i32 %Next_Val, %4
  br i1 %loop_condition, label %loop_body, label %afterBB

afterBB:                                          ; preds = %loop_body
  %12 = call i32 bitcast (i32 (i8*, i32)* @printf to i32 (i8*)*)(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @4, i32 0, i32 0))
  store i32 1, i32* %i4
  br label %loop_body5

loop_body5:                                       ; preds = %loop_body5, %afterBB
  %i7 = phi i32 [ 1, %afterBB ], [ %Next_Val12, %loop_body5 ]
  %13 = load i32, i32* @n
  %14 = load i32, i32* %i4
  %multmp8 = mul i32 %14, 6
  %addtmp9 = add i32 %multmp8, 3
  %15 = load i32, i32* %i4
  %b_Index = getelementptr [100 x i32], [100 x i32]* @b, i32 0, i32 %15
  %16 = load i32, i32* %b_Index
  store i32 %addtmp9, i32* %b_Index
  %17 = load i32, i32* %i4
  %b_Index10 = getelementptr [100 x i32], [100 x i32]* @b, i32 0, i32 %17
  %18 = load i32, i32* %b_Index10
  %19 = call i32 @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @5, i32 0, i32 0), i32 %18)
  %20 = call i32 bitcast (i32 (i8*, i32)* @printf to i32 (i8*)*)(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @6, i32 0, i32 0))
  %i11 = load i32, i32* %i4
  %Next_Val12 = add i32 %i11, 1
  store i32 %Next_Val12, i32* %i4
  %loop_condition13 = icmp slt i32 %Next_Val12, %13
  br i1 %loop_condition13, label %loop_body5, label %afterBB6

afterBB6:                                         ; preds = %loop_body5
  store i32 1, i32* %i14
  br label %loop_body15

loop_body15:                                      ; preds = %loop_body15, %afterBB6
  %i17 = phi i32 [ 1, %afterBB6 ], [ %Next_Val22, %loop_body15 ]
  %21 = load i32, i32* @n
  %22 = load i32, i32* %i14
  %a_Index18 = getelementptr [100 x i32], [100 x i32]* @a, i32 0, i32 %22
  %23 = load i32, i32* %i14
  %b_Index19 = getelementptr [100 x i32], [100 x i32]* @b, i32 0, i32 %23
  %24 = load i32, i32* %a_Index18
  %25 = load i32, i32* %b_Index19
  %addtmp20 = add i32 %24, %25
  %26 = load i32, i32* %i14
  %sum_Index = getelementptr [100 x i32], [100 x i32]* @sum, i32 0, i32 %26
  %27 = load i32, i32* %sum_Index
  store i32 %addtmp20, i32* %sum_Index
  %i21 = load i32, i32* %i14
  %Next_Val22 = add i32 %i21, 1
  store i32 %Next_Val22, i32* %i14
  %loop_condition23 = icmp slt i32 %Next_Val22, %21
  br i1 %loop_condition23, label %loop_body15, label %afterBB16

afterBB16:                                        ; preds = %loop_body15
  %28 = call i32 bitcast (i32 (i8*, i32)* @printf to i32 (i8*)*)(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @7, i32 0, i32 0))
  store i32 1, i32* %i24
  br label %loop_body25

loop_body25:                                      ; preds = %loop_body25, %afterBB16
  %i27 = phi i32 [ 1, %afterBB16 ], [ %Next_Val30, %loop_body25 ]
  %29 = load i32, i32* @n
  %30 = load i32, i32* %i24
  %sum_Index28 = getelementptr [100 x i32], [100 x i32]* @sum, i32 0, i32 %30
  %31 = load i32, i32* %sum_Index28
  %32 = call i32 @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @8, i32 0, i32 0), i32 %31)
  %i29 = load i32, i32* %i24
  %Next_Val30 = add i32 %i29, 1
  store i32 %Next_Val30, i32* %i24
  %loop_condition31 = icmp slt i32 %Next_Val30, %29
  br i1 %loop_condition31, label %loop_body25, label %afterBB26

afterBB26:                                        ; preds = %loop_body25
  %33 = call i32 bitcast (i32 (i8*, i32)* @printf to i32 (i8*)*)(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @9, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8*, i32)
